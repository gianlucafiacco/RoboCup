SimRobot = cppApplication + {

  dependencies = { "SimRobotCore2", "SimRobotEditor", "SimRobotHelp", "Factory", "SimpleVehicle" },

  root = "$(simRobotDir)/Src/SimRobot"
  files = {
    "$(simRobotDir)/Src/SimRobot/**.cpp" = cppSource
    "$(simRobotDir)/Src/SimRobot/**.h"
    if (host != "Win32") {
      -"$(simRobotDir)/Src/SimRobot/qtdotnetstyle.cpp"
    }
    "$(buildPlatformDir)/SimRobotHelp/$(configuration)/help.qch" = copyFile
    "$(buildPlatformDir)/SimRobotHelp/$(configuration)/helpcollection.qhc" = copyFile
    if (platform == "Linux") {
      "$(buildPlatformDir)/SimRobotCore2/$(configuration)/libSimRobotCore2.so" = copyFile
      "$(buildPlatformDir)/SimRobotEditor/$(configuration)/libSimRobotEditor.so" = copyFile
      "$(buildPlatformDir)/SimRobotHelp/$(configuration)/libSimRobotHelp.so" = copyFile
      "$(buildPlatformDir)/Factory/$(configuration)/libFactory.so" = copyFile
      "$(buildPlatformDir)/SimpleVehicle/$(configuration)/libSimpleVehicle.so" = copyFile
    }
    if (host == "Win32") {
      "$(simRobotDir)/Src/SimRobot/SimRobot.rc" = rcSource
      "$(buildPlatformDir)/SimRobotCore2/$(configuration)/SimRobotCore2.dll" = copyFile
      "$(buildPlatformDir)/SimRobotEditor/$(configuration)/SimRobotEditor.dll" = copyFile
      "$(buildPlatformDir)/SimRobotHelp/$(configuration)/SimRobotHelp.dll" = copyFile
      "$(buildPlatformDir)/Factory/$(configuration)/Factory.dll" = copyFile
      "$(buildPlatformDir)/SimpleVehicle/$(configuration)/SimpleVehicle.dll" = copyFile

      "$(simRobotDir)/Util/qt/Windows/lib/QtCore4.dll" = copyFile
      "$(simRobotDir)/Util/qt/Windows/lib/QtGui4.dll" = copyFile
      "$(simRobotDir)/Util/qt/Windows/lib/QtSvg4.dll" = copyFile

      // for SimRobotCore2
      "$(simRobotDir)/Util/qt/Windows/lib/QtOpenGL4.dll" = copyFile
      "$(simRobotDir)/Util/libxml2/Windows/bin/libxml2.dll" = copyFile
      "$(simRobotDir)/Util/glew/Windows/bin/glew32.dll" = copyFile

      // for SimRobotHelp
      "$(simRobotDir)/Util/qt/Windows/lib/QtCLucene4.dll" = copyFile
      "$(simRobotDir)/Util/qt/Windows/lib/QtHelp4.dll" = copyFile
      "$(simRobotDir)/Util/qt/Windows/lib/QtNetwork4.dll" = copyFile
      "$(simRobotDir)/Util/qt/Windows/lib/QtSql4.dll" = copyFile
      "$(simRobotDir)/Util/qt/Windows/lib/QtXml4.dll" = copyFile
      "$(simRobotDir)/Util/qt/Windows/plugins/sqldrivers/qsqlite4.dll" = copyFile + {
        output = "$(buildDir)/sqldrivers/qsqlite4.dll"
      }
    }
  }
  qtRessourceFiles = "$(simRobotDir)/Src/SimRobot/Icons/**.png"
  qtRccFiles = "$(simRobotDir)/Src/SimRobot/SimRobot.qrc"
  qtMocFiles = {
    "$(simRobotDir)/Src/SimRobot/MainWindow.h"
    "$(simRobotDir)/Src/SimRobot/RegisteredDockWidget.h"
    "$(simRobotDir)/Src/SimRobot/SceneGraphDockWidget.h"
    "$(simRobotDir)/Src/SimRobot/StatusBar.h"
  }
  files += qtFiles
  
  
  defines += {
    "QT_SHARED", "QT_GUI_LIB", "QT_CORE_LIB", "QT_SVG_LIB", "QT_NO_STL"
    if (host == "Win32") {
      "_CRT_SECURE_NO_DEPRECATE"
    }
    if (configuration != "Debug") {
      "QT_NO_DEBUG"
    }
  }

  includePaths = {
    if (platform == "Linux") {
      "/usr/include/qt4/QtCore",
      "/usr/include/qt4/QtGui",
      "/usr/include/qt4",
      "/usr/include/qt4/QtSvg",
      "/usr/include/QtCore",
      "/usr/include/QtGui",
      "/usr/include/QtSvg",
      "/usr/include/Qt",
    } else if (host == "Win32") {
      "$(simRobotDir)/Util/qt/Windows/include",
      "$(simRobotDir)/Util/qt/Windows/include/QtCore",
      "$(simRobotDir)/Util/qt/Windows/include/QtGUI",
      "$(simRobotDir)/Util/qt/Windows/include/QtOpenGL",
      "$(simRobotDir)/Util/qt/Windows/include/QtSvg",
    }
  }
  
  libs = {
    if (platform == "Linux") {
      "rt", "pthread", "QtGui", "QtCore", "QtSvg"
    }
    if (host == "Win32") {
      if (configuration == "Debug") {
        "qtmaind"
      } else {
        "qtmain"
      }
      "QtCore4", "QtGui4", "QtOpenGL4", "QtSvg4"
    }
  }
  
  libPaths = {
    if (host == "Win32") {
      "$(simRobotDir)/Util/qt/Windows/lib"
    }
  }

  linkFlags += {
    if (tool == "vcxproj" && configuration == "Debug") { "/NODEFAULTLIB:msvcrt.lib" }
  }
}
