Controller = cppStaticLibrary + {

  folder = "Libs"
  root = "$(srcDirRoot)"

  precompiledHeader = {
    "$(srcDirRoot)/Tools/Precompiled/ControllerPch.h"
  }

  files = {
    "$(srcDirRoot)/Controller/**.cpp" = bhCppSource,
    "$(srcDirRoot)/Controller/**.h",
    if (platform != "Linux") {
      -"$(srcDirRoot)/Controller/Platform/Linux/**.cpp",
      -"$(srcDirRoot)/Controller/Platform/Linux/**.h"
    }
    if (platform != "MacOSX") {
      -"$(srcDirRoot)/Controller/Platform/OSX/**.cpp",
      -"$(srcDirRoot)/Controller/Platform/OSX/**.h"
    }
    if (host != "Win32") {
      -"$(srcDirRoot)/Controller/Platform/Windows/**.cpp",
      -"$(srcDirRoot)/Controller/Platform/Windows/**.h"
    }
    "$(srcDirRoot)/Tools/Precompiled/BHumanPch.h"
  }
  files += pchFiles

  qtRessourceFiles = "$(srcDirRoot)/Controller/Icons/*.png"
  qtRccFiles = "$(srcDirRoot)/Controller/*.qrc"
  qtMocFiles = {
    "$(srcDirRoot)/Controller/Views/AnnotationView/AnnotationWidget.h"
    "$(srcDirRoot)/Controller/Views/DataView/DataWidget.h"
    "$(srcDirRoot)/Controller/Views/DataView/PropertyManager.h"
    "$(srcDirRoot)/Controller/Views/DataView/PropertyEditorFactory.h"
    "$(srcDirRoot)/Controller/Views/TimeView/TimeWidget.h"
    "$(srcDirRoot)/Controller/Views/KickView/TabWidget.h"
    "$(srcDirRoot)/Controller/Views/KickView/KickView.h"
    "$(srcDirRoot)/Controller/Views/KickView/KickViewGLWidget.h"
    "$(srcDirRoot)/Controller/Views/KickView/KickViewWidget.h"
    "$(srcDirRoot)/Controller/Views/PlotView.h"
    "$(srcDirRoot)/Controller/Views/ConsoleView.h"
    "$(srcDirRoot)/Controller/Views/ImageView.h"
    "$(srcDirRoot)/Controller/Views/DotView.h"
    "$(srcDirRoot)/Controller/BHToolBar.h"
    "$(srcDirRoot)/Controller/Views/ColorCalibrationView/ColorCalibrationView.h"
    "$(srcDirRoot)/Controller/Views/ColorCalibrationView/RangeSelector.h"
    "$(srcDirRoot)/Controller/Views/ColorCalibrationView/ThresholdSelector.h"
  }
  files += qtFiles

  defines += {
    "QT_SHARED", "QT_OPENGL_LIB", "QT_GUI_LIB", "QT_CORE_LIB", "TARGET_SIM", "QT_NO_STL", "QXT_STATIC"
    if (host == "Win32") {
      "_CRT_SECURE_NO_DEPRECATE"
    }
    if (configuration != "Debug") {
      "QT_NO_DEBUG"
    }
  }

  includePaths = {
    "$(srcDirRoot)",
    "$(utilDirRoot)/Eigen",
    "$(utilDirRoot)/SimRobot/Src/SimRobot",
    "$(utilDirRoot)/SimRobot/Src/SimRobotCore2",
    "$(utilDirRoot)/SimRobot/Src/SimRobotEditor",
    "$(utilDirRoot)/GameController/include",
    "$(utilDirRoot)/libjpeg/src",
    "$(utilDirRoot)/libqxt",
    "$(utilDirRoot)/qtpropertybrowser",
    "$(utilDirRoot)/snappy/include",
    if (host == "Win32") {
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include",
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include/QtCore",
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include/QtGui",
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include/QtOpenGL",
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include/QtSvg",
      "$(utilDirRoot)/SimRobot/Util/glew/Windows/include",
      "$(utilDirRoot)/Buildchain/Windows/include",
    }
    if (platform == "Linux") {
      "/usr/include/qt4/QtCore",
      "/usr/include/qt4/QtGui",
      "/usr/include/qt4/QtOpenGL",
      "/usr/include/qt4/QtSvg",
      "/usr/include/qt4",
      "/usr/include/QtCore",
      "/usr/include/QtGui",
      "/usr/include/QtOpenGL",
      "/usr/include/QtSvg",
      "/usr/include/Qt",
    }
  }

  cppFlags += {
    if (tool == "vcxproj") {
      "/Zm200"
      "/wd4503"
      if (configuration == "Release") {
        "/GS-"
      }
    }
    if (platform == "Linux") {
      "-fPIC"
    }
  }

  visualizers = {
    "$(utilDirRoot)/Buildchain/Windows/Visualizers/Angle.natvis"
    "$(utilDirRoot)/Buildchain/Windows/Visualizers/qt4.natvis"
    "$(utilDirRoot)/Eigen/debug/msvc/eigen.natvis"
  }
}
