SimulatedNao = cppDynamicLibrary + {
  dependencies = { "Controller", "qtpropertybrowser", "libqxt" }

  root = "$(srcDirRoot)"

  precompiledHeader = {
    "$(srcDirRoot)/Tools/Precompiled/BHumanPch.h"
  }

  files = {
    "$(srcDirRoot)/Modules/**.cpp" = bhCppSource,
    "$(srcDirRoot)/Modules/**.h",
    "$(srcDirRoot)/Platform/**.cpp" = bhCppSource,
    "$(srcDirRoot)/Platform/**.h",
    "$(srcDirRoot)/Processes/**.cpp" = bhCppSource,
    "$(srcDirRoot)/Processes/**.h",
    "$(srcDirRoot)/Representations/**.cpp" = bhCppSource,
    "$(srcDirRoot)/Representations/**.h",
    "$(srcDirRoot)/Tools/**.cpp" = bhCppSource,
    "$(srcDirRoot)/Tools/**.h",
    "$(srcDirRoot)/Util/PTracking/**.cpp" = bhCppSource,
    "$(srcDirRoot)/Util/PTracking/**.h",
    "$(srcDirRoot)/Util/gsl/**.cpp" = bhCppSource,
    "$(srcDirRoot)/Util/gsl/**.h",
    "$(srcDirRoot)/Util/Utils/**.cpp" = bhCppSource,
    "$(srcDirRoot)/Util/Utils/**.h",  
    if (platform != "Linux") {
      -"$(srcDirRoot)/Platform/Linux/**.cpp",
      -"$(srcDirRoot)/Platform/Linux/**.h"
    }
    if (platform != "MacOSX") {
      -"$(srcDirRoot)/Platform/OSX/**.cpp",
      -"$(srcDirRoot)/Platform/OSX/**.h"
    }

    if (host != "Win32") {
      -"$(srcDirRoot)/Platform/Windows/**.cpp",
      -"$(srcDirRoot)/Platform/Windows/**.h"
    }
    if (platform == "Linux") {
      -"$(srcDirRoot)/Platform/Linux/SystemCall.cpp",
      -"$(srcDirRoot)/Platform/Linux/SystemCall.h",
      -"$(srcDirRoot)/Platform/Linux/Robot.cpp",
      -"$(srcDirRoot)/Platform/Linux/Robot.h",
      -"$(srcDirRoot)/Platform/Linux/Main.cpp",
      -"$(srcDirRoot)/Platform/Linux/NaoBody.cpp",
      -"$(srcDirRoot)/Platform/Linux/NaoBody.h",
      -"$(srcDirRoot)/Platform/Linux/NaoCamera.cpp",
      -"$(srcDirRoot)/Platform/Linux/NaoCamera.h",
    }
    -"$(srcDirRoot)/Tools/Precompiled/ControllerPch.*"
  }
  files += pchFiles

  defines += {
    "TARGET_SIM", "QT_SHARED", "QT_OPENGL_LIB", "QT_GUI_LIB", "QT_CORE_LIB", "QT_NO_STL"
    if (host == "Win32") {
      "_CRT_SECURE_NO_DEPRECATE"
    }
    if (configuration == "Develop") {
      -"NDEBUG"
    }
    if (configuration != "Debug") {
      "QT_NO_DEBUG"
    }
  }

  includePaths = {
    "$(srcDirRoot)",
    "$(utilDirRoot)/Eigen",
    "$(utilDirRoot)/GameController/include",
    "$(utilDirRoot)/fftw-3.3",
    "$(utilDirRoot)/libjpeg/src",
    "$(utilDirRoot)/libqxt",
    "$(utilDirRoot)/qtpropertybrowser",
    "$(utilDirRoot)/SimRobot/Src/SimRobot",
    "$(utilDirRoot)/SimRobot/Src/SimRobotCore2",
    "$(utilDirRoot)/SimRobot/Src/SimRobotEditor",
    "$(utilDirRoot)/snappy/include",
    if (host == "Win32") {
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include",
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include/QtCore",
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include/QtGUI",
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include/QtOpenGL",
      "$(utilDirRoot)/SimRobot/Util/glew/Windows/include",
      "$(utilDirRoot)/Buildchain/Windows/include",
    } else if (platform == "Linux") {
      "$(buildDir)",
      "/usr/include/qt4/QtCore",
      "/usr/include/qt4/QtGui",
      "/usr/include/qt4/QtOpenGL",
      "/usr/include/qt4",
      "/usr/include/QtCore",
      "/usr/include/QtGui",
      "/usr/include/QtOpenGL",
      "/usr/include/Qt",
      "$(utilDirRoot)/SimRobot/Util/ode/Linux/include",
      "$(utilDirRoot)/PTracking/include",
      "$(utilDirRoot)/gsl/include",
      "$(utilDirRoot)/Utils"
    }
  }

  libPaths = {
    "$(buildPlatformDir)/Controller/$(configuration)",
    "$(buildPlatformDir)/qtpropertybrowser/$(configuration)",
    "$(buildPlatformDir)/libqxt/$(configuration)",
    "$(utilDirRoot)/PTracking/lib",
    "$(utilDirRoot)/gsl/lib",
    if (platform == "Linux") {
      "$(utilDirRoot)/fftw-3.3/Linux64",
      "$(utilDirRoot)/libjpeg/lib/Linux",
      "$(utilDirRoot)/snappy/lib/Linux/x64",
    } else if (host == "Win32") {
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/lib",
      "$(utilDirRoot)/libjpeg/lib/Windows",
      "$(utilDirRoot)/snappy/lib/Windows",
    }
  }

  libs = {
    "Controller", "qtpropertybrowser", "qxt"
    if (host == "Win32") {
      "QtCore4", "QtGui4", "QtOpenGl4", "QtSvg4", "winmm", "opengl32", "glu32", "ws2_32", "libjpeg"
      if (configuration == "Debug") {
        "snappyd"
      } else {
        "snappy"
      }
    } else if (platform == "Linux") {
      "rt", "pthread", "GLEW", "QtGui", "QtCore", "QtOpenGL", "QtSvg", "GLU", "GL", "fftw3", "jpeg", "snappy", "ptracking", "gsl"
    }
  }

  cppFlags += {
    if (tool == "vcxproj") {
      "/Zm200"
      if (configuration == "Develop") {
        -"/Ox /Ob2 /Oi /Ot /Oy /GT",
        "/Od /ZI"
      } else if (configuration == "Release") {
        "/wd4101 /GS-"
      }
    } else {
      "-mmmx -msse -msse2 -msse3 -mssse3"
      "-Wno-switch" // deactivating this is a problem because of the ENUM macro, since numOf<ENUM>s is never used in switch.
      if (configuration == "Develop") {
        -"-O3 -fomit-frame-pointer", "-g"
      }
    }
  }

  linkFlags += {
    //the rpath specifies a searchpath for dynamic libraries.
    if (platform == "Linux") {
      " -Wl,-rpath -Wl,${ORIGIN}"
    } else if (platform == "MacOSX"){
      " -Wl,-rpath -Wl,${ORIGIN}/../Resources/"
    }
    if (tool == "vcxproj") {
      if (configuration == "Debug") {
        "/NODEFAULTLIB:msvcrt.lib"
      } else if (configuration == "Develop") {
        "/INCREMENTAL /DEBUG /SAFESEH:NO",
        -"/OPT:REF /OPT:ICF"
      }
    } else {
      if (configuration == "Develop") {
        -"-s"
      }
    }
  }

  visualizers = {
    "$(utilDirRoot)/Buildchain/Windows/Visualizers/Angle.natvis"
    "$(utilDirRoot)/Eigen/debug/msvc/eigen.natvis"
  }
}
